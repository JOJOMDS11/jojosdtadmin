const { SlashCommandBuilder, EmbedBuilder } = require('discord.js');
const { getPlayerByDiscordId } = require('../database/models/player');
const { getTeamByOwner, updateTeamFormation } = require('../database/models/team');
const { getCardById } = require('../database/models/card');

const escalar = async (interaction) => {
    try {
        const posicao = interaction.options.getString('posicao');
        const cardId = interaction.options.getInteger('id');
        const playerId = interaction.user.id;

        await interaction.deferReply();

        // Verificar se tem player
        const player = await getPlayerByDiscordId(playerId);
        if (!player) {
            return await interaction.editReply({
                content: '‚ùå **JOGADOR N√ÉO ENCONTRADO!**\n' +
                    'üéÆ Use `/obter` para come√ßar a jogar!'
            });
        }

        // Verificar se tem time
        const team = await getTeamByOwner(playerId);
        if (!team) {
            return await interaction.editReply({
                content: '‚ùå **TIME N√ÉO ENCONTRADO!**\n' +
                    'üèÜ Use `/registrartime` para criar seu time primeiro!'
            });
        }

        // Verificar se a carta existe e pertence ao jogador
        const carta = await getCardById(cardId, playerId);
        if (!carta) {
            return await interaction.editReply({
                content: `‚ùå **CARTA N√ÉO ENCONTRADA!**\n` +
                    `üé¥ A carta com ID \`#${cardId}\` n√£o existe ou n√£o pertence a voc√™.\n` +
                    `üìã Use \`/elenco\` para ver suas cartas dispon√≠veis.`
            });
        }

        // Verificar se a posi√ß√£o da carta bate com a posi√ß√£o solicitada
        if (carta.position !== posicao) {
            return await interaction.editReply({
                content: `‚ùå **POSI√á√ÉO INCOMPAT√çVEL!**\n` +
                    `‚öΩ A carta \`#${cardId}\` (**${carta.player_name}**) √© um **${carta.position}**.\n` +
                    `üéØ Voc√™ est√° tentando escalar para **${posicao}**.\n\n` +
                    `ÔøΩ **Posi√ß√µes dispon√≠veis:**\n` +
                    `ü•Ö **GK** - Goleiro\n` +
                    `üõ°Ô∏è **VL** - Volante\n` +
                    `‚öΩ **PV** - Piv√¥`
            });
        }

        // Fun√ß√£o para gerar bolinha colorida baseada na raridade
        const generateHaxBall = (rarity) => {
            if (rarity === 'Prime') return 'üü£'; // Roxo - Prime
            else if (rarity === 'GOAT') return 'üî¥'; // Vermelho - GOAT  
            else if (rarity === 'M√©dio') return 'üü°'; // Amarelo - M√©dio
            else return '‚ö™'; // Branco - Bagre
        };

        // Determinar qual campo atualizar no banco
        let updateField = '';
        let positionEmoji = '';
        let positionName = '';
        
        switch (posicao) {
            case 'GK':
                updateField = 'gk_card_id';
                positionEmoji = 'ü•Ö';
                positionName = 'GOLEIRO';
                break;
            case 'VL':
                updateField = 'vl_card_id';
                positionEmoji = 'üõ°Ô∏è';
                positionName = 'VOLANTE';
                break;
            case 'PV':
                updateField = 'pv_card_id';
                positionEmoji = '‚öΩ';
                positionName = 'PIV√î';
                break;
            default:
                return await interaction.editReply({
                    content: `‚ùå **POSI√á√ÉO INV√ÅLIDA!**\n` +
                        `‚ö†Ô∏è Posi√ß√µes v√°lidas: **GK**, **VL**, **PV**`
                });
        }

        try {
            // Atualizar escala√ß√£o no banco
            const updateData = {};
            updateData[updateField] = cardId;
            await updateTeamFormation(team.id, updateData);

            // Obter stats espec√≠ficos da posi√ß√£o para mostrar
            let statsText = '';
            if (posicao === 'GK') {
                statsText = `POS:${carta.posicionamento || 0} SAI:${carta.saidaDeBola || 0} DEF:${carta.defesa || 0} DRI:${carta.drible || 0}`;
            } else if (posicao === 'VL') {
                statsText = `DEF:${carta.defesa || 0} DRI:${carta.drible || 0} PAS:${carta.passe || 0} FIN:${carta.finalizacao || 0}`;
            } else if (posicao === 'PV') {
                statsText = `POS:${carta.posicionamento || 0} DRI:${carta.drible || 0} PAS:${carta.passe || 0} FIN:${carta.finalizacao || 0}`;
            }

            // Criar embed de confirma√ß√£o
            const embed = new EmbedBuilder()
                .setColor(0x00FF00) // Verde para sucesso
                .setTitle(`${positionEmoji} ${positionName} ESCALADO!`)
                .setDescription(`‚úÖ **Escala√ß√£o atualizada com sucesso!**`)
                .addFields(
                    {
                        name: `${positionEmoji} **${positionName}**`,
                        value: `${generateHaxBall(carta.rarity)} **${carta.player_name}** ${carta.avatar || ''}\n` +
                            `‚≠ê **Overall:** ${carta.overall_rating}\n` +
                            `üìä **Stats:** ${statsText}\n` +
                            `üé¥ **ID:** \`#${carta.id}\`\n` +
                            `üíé **Raridade:** ${carta.rarity}`,
                        inline: false
                    },
                    {
                        name: 'üèÜ **Time**',
                        value: `**${team.name}**\n` +
                            `üë§ **Dono:** ${player.username}`,
                        inline: true
                    },
                    {
                        name: 'üìã **Pr√≥ximos Passos**',
                        value: `üîß Continue escalando as outras posi√ß√µes\n` +
                            `üëÄ Use \`/meutime\` para ver a escala√ß√£o completa\n` +
                            `‚öîÔ∏è Use \`/desafiar\` para jogar contra outros times`,
                        inline: true
                    }
                )
                .setTimestamp()
                .setFooter({ 
                    text: `Escala√ß√£o manual ‚Ä¢ Use /escalar <posi√ß√£o> <id> para outras posi√ß√µes` 
                });

            await interaction.editReply({ embeds: [embed] });

        } catch (updateError) {
            console.error('Erro ao atualizar escala√ß√£o:', updateError);
            await interaction.editReply({
                content: '‚ùå **ERRO AO ESCALAR!**\n' +
                    '‚ö†Ô∏è Houve um problema ao salvar sua escala√ß√£o. Tente novamente.'
            });
        }

    } catch (error) {
        console.error('Erro no comando escalar:', error);
        
        if (interaction.deferred) {
            await interaction.editReply({
                content: '‚ùå **ERRO INTERNO!**\n' +
                    '‚ö†Ô∏è Ocorreu um erro inesperado. Tente novamente em alguns segundos.'
            });
        } else {
            await interaction.reply({
                content: '‚ùå **ERRO INTERNO!**\n' +
                    '‚ö†Ô∏è Ocorreu um erro inesperado. Tente novamente em alguns segundos.',
                ephemeral: true
            });
        }
    }
};

module.exports = {
    data: new SlashCommandBuilder()
        .setName('escalar')
        .setDescription('Escalar uma carta espec√≠fica para uma posi√ß√£o do seu time')
        .addStringOption(option =>
            option.setName('posicao')
                .setDescription('Posi√ß√£o para escalar a carta')
                .setRequired(true)
                .addChoices(
                    { name: 'ü•Ö Goleiro (GK)', value: 'GK' },
                    { name: 'üõ°Ô∏è Volante (VL)', value: 'VL' },
                    { name: '‚öΩ Piv√¥ (PV)', value: 'PV' }
                ))
        .addIntegerOption(option =>
            option.setName('id')
                .setDescription('ID da carta (use /elenco para ver suas cartas)')
                .setRequired(true)
                .setMinValue(1)),
    execute: escalar
};
