const { SlashCommandBuilder, EmbedBuilder, AttachmentBuilder } = require('discord.js');
const { getPlayerByDiscordId } = require('../database/models/player');
const { getCardById } = require('../database/models/card');
const { generateSimpleCardImage } = require('../utils/simpleImageGenerator');
const { convertAvatarCode } = require('../utils/avatarConverter');

module.exports = {
    data: new SlashCommandBuilder()
        .setName('mostrarcarta')
        .setDescription('üé¥ Mostrar detalhes de uma carta espec√≠fica com imagem!')
        .addIntegerOption(option =>
            option.setName('id')
                .setDescription('ID da carta que voc√™ quer ver')
                .setRequired(true)),

    async execute(interaction) {
        try {
            const playerId = interaction.user.id;
            const cardId = interaction.options.getInteger('id');

            await interaction.deferReply(); // P√∫blico para todos verem

            // Verificar se tem player
            let player = await getPlayerByDiscordId(playerId);
            if (!player) {
                return await interaction.editReply({
                    content: '‚ùå **JOGADOR N√ÉO ENCONTRADO!**\n' +
                        'üéÆ Use `/registrartime` para se registrar primeiro!'
                });
            }

            // Buscar a carta
            const card = await getCardById(cardId, playerId);

            if (!card) {
                return await interaction.editReply({
                    content: `‚ùå **CARTA #${cardId} N√ÉO ENCONTRADA!**\n` +
                        'üîç Verifique se o ID est√° correto e se a carta √© sua.'
                });
            }

            // Definir cores por raridade
            const cores = {
                'Bagre': '#8B4513',
                'M√©dio': '#C0C0C0',
                'Prime': '#FFD700',
                'GOAT': '#9D4EDD'
            };

            const cor = cores[card.rarity] || '#FFFFFF';

            // Definir emojis por raridade
            const emojis = {
                'Bagre': 'üêü',
                'M√©dio': 'ü•à',
                'Prime': '‚≠ê',
                'GOAT': 'üêê'
            };

            const emoji = emojis[card.rarity] || 'üé¥';

            // Stats espec√≠ficos por posi√ß√£o
            let statsText = '';
            if (card.stats) {
                if (card.position === 'GK') {
                    statsText = `ü•Ö **POS:** ${card.stats.posicionamento || 60}\n` +
                        `üß§ **SAI:** ${card.stats.saidaDeBola || 60}\n` +
                        `üõ°Ô∏è **DEF:** ${card.stats.defesa || 60}\n` +
                        `‚öΩ **DRI:** ${card.stats.drible || 60}`;
                } else if (card.position === 'VL') {
                    statsText = `üõ°Ô∏è **DEF:** ${card.stats.defesa || 60}\n` +
                        `‚öΩ **DRI:** ${card.stats.drible || 60}\n` +
                        `üéØ **PAS:** ${card.stats.passe || 60}\n` +
                        `ü•Ö **FIN:** ${card.stats.finalizacao || 60}`;
                } else if (card.position === 'PV') {
                    statsText = `üìç **POS:** ${card.stats.posicionamento || 60}\n` +
                        `‚öΩ **DRI:** ${card.stats.drible || 60}\n` +
                        `üéØ **PAS:** ${card.stats.passe || 60}\n` +
                        `ü•Ö **FIN:** ${card.stats.finalizacao || 60}`;
                }
            } else {
                statsText = 'Stats n√£o dispon√≠veis';
            }

            // üé® SEMPRE gerar imagem da carta!
            let cardImageAttachment = null;
            try {
                console.log('üé® Gerando imagem da carta...');
                const imageBuffer = await generateSimpleCardImage({
                    ...card,
                    player_name: card.player_name,
                    overall: card.overall_rating,
                    id: card.id
                });

                if (imageBuffer) {
                    cardImageAttachment = new AttachmentBuilder(imageBuffer, {
                        name: `carta_${card.player_name.replace(/\s+/g, '_')}_${card.id}.png`
                    });
                    console.log('‚úÖ Imagem da carta gerada com sucesso!');
                }
            } catch (imageError) {
                console.warn('‚ö†Ô∏è Erro ao gerar imagem da carta:', imageError.message);
            }

            // Converter o avatar de c√≥digo para emoji real
            const playerAvatar = convertAvatarCode(card.avatar || card.template_avatar);

            // Criar embed da carta
            const embed = new EmbedBuilder()
                .setColor(cor)
                .setTitle(`${emoji} ${card.player_name} ${playerAvatar}`)
                .setDescription(`üé¥ **Carta ID:** \`#${card.id}\`\nüìç **Posi√ß√£o:** ${card.position}\n‚≠ê **Overall:** ${card.overall_rating}`)
                .addFields(
                    { name: 'üíé Raridade', value: `${emoji} ${card.rarity}`, inline: true },
                    { name: 'üí∞ Valor de Venda', value: `${getCardSellPrice(card.rarity)} Purple Coins`, inline: true },
                    { name: '\u200b', value: '\u200b', inline: true }, // Campo vazio para alinhar
                    { name: 'üìä Estat√≠sticas Detalhadas', value: statsText, inline: false }
                );

            // Adicionar estat√≠sticas espec√≠ficas baseadas na posi√ß√£o
            if (card.position === 'GK') {
                embed.addFields(
                    { name: 'ü•Ö Stats de Goleiro', value: `üèüÔ∏è **Jogos:** ${card.games_played || 0}\nü•Ö **Gols Sofridos:** ${card.goals_conceded || 0}\nüõ°Ô∏è **Jogos sem Sofrer Gols:** ${card.clean_sheets || 0}\n‚öΩ **Gols Contra:** ${card.own_goals || 0}`, inline: true },
                    { name: 'üìà Performance de Goleiro', value: `üéØ **M√©dia Gols/Jogo:** ${card.games_played > 0 ? ((card.goals_conceded || 0) / card.games_played).toFixed(2) : '0.00'}\nüìä **% Clean Sheets:** ${card.games_played > 0 ? (((card.clean_sheets || 0) / card.games_played) * 100).toFixed(1) : '0.0'}%`, inline: true }
                );
            } else {
                embed.addFields(
                    { name: 'üéÆ Hist√≥rico de Jogos', value: `üèüÔ∏è **Jogos:** ${card.games_played || 0}\n‚öΩ **Gols:** ${card.goals || 0}\nüéØ **Assist√™ncias:** ${card.assists || 0}\nüîÑ **Gols Contra:** ${card.own_goals || 0}`, inline: true },
                    { name: 'üìà Performance', value: `üéØ **M√©dia de Gols:** ${card.games_played > 0 ? ((card.goals || 0) / card.games_played).toFixed(2) : '0.00'}\nüìä **M√©dia de Assists:** ${card.games_played > 0 ? ((card.assists || 0) / card.games_played).toFixed(2) : '0.00'}`, inline: true }
                );
            }

            embed.setTimestamp()
                .setFooter({
                    text: `HaxBall DreamTeam ‚Ä¢ Carta de ${interaction.user.username}`,
                    iconURL: interaction.user.displayAvatarURL()
                });

            // Adicionar imagem da carta se dispon√≠vel
            if (cardImageAttachment) {
                embed.setImage(`attachment://${cardImageAttachment.name}`);
            }

            // Adicionar informa√ß√µes extras baseadas na raridade
            if (card.rarity === 'GOAT') {
                embed.addFields({
                    name: 'üêê Status Especial',
                    value: '**GOAT** - Greatest of All Time!\nCarta lend√°ria com stats superiores.',
                    inline: false
                });
            } else if (card.rarity === 'Prime') {
                embed.addFields({
                    name: '‚≠ê Status Especial',
                    value: '**PRIME** - Carta premium de elite!\nM√°ximo desempenho garantido.',
                    inline: false
                });
            }

            // Responder SEMPRE com a imagem da carta
            const responseData = { embeds: [embed] };
            if (cardImageAttachment) {
                responseData.files = [cardImageAttachment];
            }

            await interaction.editReply(responseData);

        } catch (error) {
            console.error('Erro no comando mostrarcarta:', error);

            const errorMessage = {
                content: '‚ùå **Erro interno!**\n' +
                    'Algo deu errado ao mostrar a carta. Tente novamente.'
            };

            if (interaction.deferred) {
                await interaction.editReply(errorMessage);
            } else {
                await interaction.reply({ ...errorMessage, ephemeral: true });
            }
        }
    }
};

// Fun√ß√£o para obter pre√ßo de venda da carta
function getCardSellPrice(rarity) {
    const prices = {
        'Prime': 1000,
        'GOAT': 500,
        'M√©dio': 200,
        'Bagre': 50
    };
    return prices[rarity] || 50;
}
