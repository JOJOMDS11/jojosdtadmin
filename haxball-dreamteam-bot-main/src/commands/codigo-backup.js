const { SlashCommandBuilder, EmbedBuilder } = require('discord.js');

module.exports = {
    data: new SlashCommandBuilder()
        .setName('codigo')
        .setDescription('üí∞ Resgatar c√≥digo de Purple Coins')
        .addStringOption(option =>
            option.setName('codigo')
                .setDescription('C√≥digo de Purple Coins para resgatar')
                .setRequired(true)
                .setMaxLength(50)
        ),

    async execute(interaction) {
        await interaction.deferReply({ ephemeral: true });

        const userId = interaction.user.id;
        const codigo = interaction.options.getString('codigo').trim().toUpperCase();

        try {
            const { connectDB, pool } = require('../database/connection');
            await connectDB();

            // Verificar se o c√≥digo existe e est√° v√°lido
            const [codeRows] = await pool.execute(`
                SELECT 
                    code,
                    amount,
                    max_uses,
                    remaining_uses,
                    expires_at,
                    used_by
                FROM purple_coin_codes 
                WHERE code = ?
            `, [codigo]);

            if (codeRows.length === 0) {
                const errorEmbed = new EmbedBuilder()
                    .setColor(0xFF0000)
                    .setTitle('‚ùå C√≥digo Inv√°lido')
                    .setDescription(`O c√≥digo \`${codigo}\` n√£o foi encontrado!`)
                    .addFields({
                        name: 'üí° Dica',
                        value: 'Verifique se digitou o c√≥digo corretamente.\nC√≥digos s√£o case-sensitive!'
                    })
                    .setFooter({ text: 'HaxBall DreamTeam' })
                    .setTimestamp();

                return await interaction.editReply({ embeds: [errorEmbed] });
            }

            const codeData = codeRows[0];

            // Verificar se expirou
            if (new Date() > new Date(codeData.expires_at)) {
                const expiredEmbed = new EmbedBuilder()
                    .setColor(0xFF0000)
                    .setTitle('‚è∞ C√≥digo Expirado')
                    .setDescription(`O c√≥digo \`${codigo}\` expirou!`)
                    .addFields({
                        name: 'üìÖ Expirou em',
                        value: new Date(codeData.expires_at).toLocaleString('pt-BR')
                    })
                    .setFooter({ text: 'HaxBall DreamTeam' })
                    .setTimestamp();

                return await interaction.editReply({ embeds: [expiredEmbed] });
            }

            // Verificar se ainda tem usos restantes
            if (codeData.remaining_uses <= 0) {
                const noUsesEmbed = new EmbedBuilder()
                    .setColor(0xFF8C00)
                    .setTitle('‚ö†Ô∏è C√≥digo Esgotado')
                    .setDescription(`O c√≥digo \`${codigo}\` j√° foi usado o m√°ximo de vezes permitidas!`)
                    .addFields({
                        name: 'üìä Estat√≠sticas',
                        value: `**Usos:** ${codeData.max_uses}/${codeData.max_uses}\n**Status:** Esgotado`
                    })
                    .setFooter({ text: 'HaxBall DreamTeam' })
                    .setTimestamp();

                return await interaction.editReply({ embeds: [noUsesEmbed] });
            }

            // Verificar se o usu√°rio j√° usou este c√≥digo
            let usedBy = [];
            if (codeData.used_by) {
                try {
                    usedBy = JSON.parse(codeData.used_by);
                } catch (e) {
                    usedBy = [];
                }
            }

            if (usedBy.includes(userId)) {
                const alreadyUsedEmbed = new EmbedBuilder()
                    .setColor(0xFF8C00)
                    .setTitle('‚ö†Ô∏è C√≥digo J√° Utilizado')
                    .setDescription(`Voc√™ j√° resgatou o c√≥digo \`${codigo}\`!`)
                    .addFields({
                        name: 'ÔøΩ Status do C√≥digo',
                        value: `**Usos Restantes:** ${codeData.remaining_uses}/${codeData.max_uses}\n**Voc√™ j√° usou:** Sim ‚úÖ`
                    })
                    .setFooter({ text: 'HaxBall DreamTeam' })
                    .setTimestamp();

                return await interaction.editReply({ embeds: [alreadyUsedEmbed] });
            }

            // Verificar se o jogador existe no banco
            const [playerRows] = await pool.execute(`
                SELECT discord_id, username, purple_coins 
                FROM players 
                WHERE discord_id = ?
            `, [userId]);

            if (playerRows.length === 0) {
                const noPlayerEmbed = new EmbedBuilder()
                    .setColor(0xFF0000)
                    .setTitle('‚ùå Jogador N√£o Registrado')
                    .setDescription('Voc√™ precisa estar registrado no sistema para resgatar c√≥digos!')
                    .addFields({
                        name: 'üéÆ Como se registrar',
                        value: 'Use o comando `/obter` para obter sua primeira carta e se registrar automaticamente!'
                    })
                    .setFooter({ text: 'HaxBall DreamTeam' })
                    .setTimestamp();

                return await interaction.editReply({ embeds: [noPlayerEmbed] });
            }

            const player = playerRows[0];
            const currentCoins = player.purple_coins || 0;
            const coinsToAdd = codeData.amount;
            const newCoins = currentCoins + coinsToAdd;

            // Adicionar usu√°rio √† lista de quem usou
            usedBy.push(userId);
            const newUsedBy = JSON.stringify(usedBy);

            // Atualizar c√≥digo (decrementar usos restantes e adicionar usu√°rio)
            await pool.execute(`
                UPDATE purple_coin_codes 
                SET remaining_uses = remaining_uses - 1,
                    used_by = ?
                WHERE code = ?
            `, [newUsedBy, codigo]);

            // Adicionar Purple Coins ao jogador
            await pool.execute(`
                UPDATE players 
                SET purple_coins = purple_coins + ?
                WHERE discord_id = ?
            `, [coinsToAdd, userId]);

            // Log da transa√ß√£o
            try {
                await pool.execute(`
                    INSERT INTO purple_coin_transactions (
                        player_discord_id,
                        amount,
                        transaction_type,
                        description,
                        created_at
                    ) VALUES (?, ?, ?, ?, NOW())
                `, [userId, coinsToAdd, 'CODIGO_RESGATADO', `C√≥digo ${codigo} resgatado`]);
            } catch (logError) {
                console.warn('Erro ao registrar transa√ß√£o:', logError.message);
            }

            // Embed de sucesso
            const successEmbed = new EmbedBuilder()
                .setColor(0x00FF00)
                .setTitle('üéâ C√≥digo Resgatado com Sucesso!')
                .setDescription(`Parab√©ns! Voc√™ resgatou o c√≥digo \`${codigo}\`!`)
                .addFields([
                    {
                        name: 'üí∞ Purple Coins Recebidas',
                        value: `**+${coinsToAdd}** Purple Coins`,
                        inline: true
                    },
                    {
                        name: 'üí≥ Saldo Anterior',
                        value: `${currentCoins} Purple Coins`,
                        inline: true
                    },
                    {
                        name: 'üíé Novo Saldo',
                        value: `**${newCoins}** Purple Coins`,
                        inline: true
                    },
                    {
                        name: 'üìä Status do C√≥digo',
                        value: `**Usos Restantes:** ${codeData.remaining_uses - 1}/${codeData.max_uses}`,
                        inline: false
                    }
                ])
                .addFields({
                    name: 'üõí O que fazer agora?',
                    value: '‚Ä¢ Use `/comprarpacote` para comprar pacotes de cartas\n‚Ä¢ Use `/loja` para ver itens dispon√≠veis\n‚Ä¢ Use `/saldo` para verificar suas Purple Coins'
                })
                .setThumbnail(interaction.user.displayAvatarURL())
                .setFooter({ text: 'HaxBall DreamTeam' })
                .setTimestamp();

            return await interaction.editReply({ embeds: [successEmbed] });

        } catch (error) {
            console.error('Erro no comando /codigo:', error);

            const errorEmbed = new EmbedBuilder()
                .setColor(0xFF0000)
                .setTitle('‚ùå Erro Interno')
                .setDescription('Ocorreu um erro ao processar seu c√≥digo. Tente novamente em alguns instantes.')
                .setFooter({ text: 'HaxBall DreamTeam' })
                .setTimestamp();

            return await interaction.editReply({ embeds: [errorEmbed] });
        }
    }
};
