// Conex√£o MySQL otimizada especificamente para Vercel Serverless
const mysql = require('mysql2/promise');

// Pool global para reutiliza√ß√£o entre invoca√ß√µes
let globalPool = null;

function createVercelPool() {
    if (!globalPool) {
        console.log('üîß Criando pool MySQL otimizado para Vercel...');
        
        globalPool = mysql.createPool({
            host: process.env.DB_HOST,
            user: process.env.DB_USER,
            password: process.env.DB_PASSWORD,
            database: process.env.DB_NAME,
            port: process.env.DB_PORT || 3306,
            // Configura√ß√µes otimizadas para Vercel Serverless
            connectionLimit: 1, // Limite baixo para serverless
            waitForConnections: true,
            queueLimit: 0,
            acquireTimeout: 30000, // 30s
            timeout: 30000, // 30s
            idleTimeout: 900000, // 15min
            ssl: {
                rejectUnauthorized: false
            },
            charset: 'utf8mb4',
            // Configura√ß√µes espec√≠ficas para serverless
            enableKeepAlive: true,
            keepAliveInitialDelay: 0
        });
        
        console.log('‚úÖ Pool Vercel criado!');
    }
    return globalPool;
}

// Fun√ß√£o para executar queries com retry autom√°tico
async function executeQuery(sql, params = []) {
    const maxRetries = 2;
    let lastError;
    
    for (let attempt = 1; attempt <= maxRetries; attempt++) {
        try {
            const pool = createVercelPool();
            console.log(`üîç [Tentativa ${attempt}] Executando: ${sql.substring(0, 50)}...`);
            
            const [rows] = await pool.execute(sql, params);
            console.log(`‚úÖ Query executada! ${rows.length} resultados`);
            return rows;
            
        } catch (error) {
            lastError = error;
            console.error(`‚ùå [Tentativa ${attempt}] Erro:`, error.message);
            
            // Se n√£o √© o √∫ltimo attempt, aguarda um pouco antes de tentar novamente
            if (attempt < maxRetries) {
                console.log('üîÑ Tentando novamente em 1s...');
                await new Promise(resolve => setTimeout(resolve, 1000));
            }
        }
    }
    
    throw lastError;
}

// Fun√ß√£o de teste de conex√£o otimizada
async function testConnection() {
    try {
        console.log('üß™ Testando conex√£o...');
        await executeQuery('SELECT 1 as test');
        console.log('‚úÖ Teste de conex√£o bem-sucedido!');
        return true;
    } catch (error) {
        console.error('‚ùå Falha no teste de conex√£o:', error.message);
        return false;
    }
}

// Fun√ß√£o para fechar pool (√∫til para cleanup)
async function closePool() {
    if (globalPool) {
        try {
            await globalPool.end();
            globalPool = null;
            console.log('‚úÖ Pool fechado');
        } catch (error) {
            console.error('‚ùå Erro ao fechar pool:', error);
        }
    }
}

module.exports = {
    executeQuery,
    testConnection,
    closePool,
    // Alias para compatibilidade
    query: executeQuery
};
